daemon off;
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    # Basic configuration for vts module
    vhost_traffic_status_zone shared:vhost_traffic_status:10m;

    # Rate limiting setup
    # 
    # Some useful resources:
    #   - https://www.nginx.com/blog/rate-limiting-nginx/
    #   - https://medium.freecodecamp.org/nginx-rate-limiting-in-a-nutshell-128fe9e0126c
    #
    # To enable rate limiting on vhost level, put something like this in vhost.d/your.domain.com
    # The various locations can co-exist in the vhost file, but the order matters: specific first
    #
    #    # Suitable for an internal API that is available after auth/authz
    #    location /protected/api {
    #        limit_req zone=dashboard_ip burst=150 nodelay;
    #        limit_req zone=whitelisted_ip burst=500 nodelay;
    #        limit_req zone=dashboard_uri burst=240 nodelay;
    #        proxy_pass http://website;
    #    }
    #
    #    # Suitable for the login section to avoid brute forcing passwords 
    #    # If you don't have too many real uses that need to log in the same minute in the morning...
    #    location /login {
    #        limit_req zone=credentials_ip burst=6 nodelay;
    #        limit_req zone=whitelisted_ip burst=500 nodelay;
    #        # Adjust the following line in case you have many real users needing to log in simultaneously
    #        limit_req zone=credentials_uri burst=60 nodelay;
    #        proxy_pass http://website;
    #    }
    #
    #    # Suitable for a medium complex website with no more than 100 hits on the same URI per minute
    #    location / {
    #        limit_req zone=regular_ip burst=30 nodelay;
    #        limit_req zone=whitelisted_ip burst=500 nodelay;
    #        limit_req zone=regular_uri burst=100 nodelay;
    #        proxy_pass http://website;
    #    }
    #

    geo $ip_limited {
        # By defaylt, apply limit
	default 1;
	# Whitelisted IP ranges, do not apply limit
	10.0.0.0/8 0;
        172.0.0.0/8 0;
	192.168.1.0/24 0;
    }

    map $ip_limited $limit_by_ip {
        # Do not apply limit if $ip_limited=0
	0 "";
        # Apply limit if $ip_limited=1
	1 $binary_remote_addr;
    }

    # Limiting bandwidth based on users and ips
    map "$remote_user:$ip_limited" $get_rate {
        # Default bandwidth
        default 3m;
        # If IP is unlimited, open it up
        "~*^:0" 20m;
        # If remote_user is set with >=2 characters, in, open it up
        "~/^.{2,}$/^:~*^" 20m;
    }

    # Limiting rates for IPs (DoS and brute force avoidance)
    limit_req_zone $limit_by_ip zone=credentials_ip:5m rate=2r/s;
    limit_req_zone $limit_by_ip zone=regular_ip:5m rate=10r/s;
    limit_req_zone $limit_by_ip zone=dashboard_ip:5m rate=50r/s;
    
    # Internal or trusted IPs are whitelisted and get much higher rates
    limit_req_zone $binary_remote_addr zone=whitelisted_ip:1m rate=500r/s;

    # Limiting rates for URIs (DDoS avoidance against one single service/url, and preserve/distribute resources across the stack)
    limit_req_zone $request_uri zone=credentials_uri:10m rate=60r/m;
    limit_req_zone $request_uri zone=regular_uri:5m rate=100r/m;
    limit_req_zone $request_uri zone=dashboard_uri:5m rate=240r/s;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;

    keepalive_timeout  65;


    include /etc/nginx/conf.d/*.conf;
}
