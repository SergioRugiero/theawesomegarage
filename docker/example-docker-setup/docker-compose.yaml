version: '3.5'

networks:
  frontend:
    name: frontend
  backend:
    name: backend
  agents:
    name: agents
  default:
    name: frontend

volumes:
  owncloud-files:
    driver: local
  owncloud-mysql:
    driver: local
  owncloud-mysql-backup:
    driver: local
  owncloud-redis:
    driver: local
  nginx-conf:
    driver: local
  nginx-logs:
    driver: local
  nginx-certs:
    driver: local
  nginx-html:
    driver: local
  portainer-data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local


services:

  owncloud:
    container_name: owncloud
    image: owncloud/server:${OWNCLOUD_VERSION}
    restart: always
    expose: 
      - "8080"
    depends_on:
      - owncloud-db
      - owncloud-redis
    environment:
      - TZ=Europe/Oslo
      - VIRTUAL_HOST=${OWNCLOUD_DOMAIN}
      - VIRTUAL_PORT=8080
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${OWNCLOUD_DOMAIN}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      - OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN}
      - OWNCLOUD_DB_TYPE=mysql
      - OWNCLOUD_DB_NAME=owncloud
      - OWNCLOUD_DB_USERNAME=owncloud
      - OWNCLOUD_DB_PASSWORD=owncloud
      - OWNCLOUD_DB_HOST=owncloud-db
      - OWNCLOUD_ADMIN_USERNAME=${ADMIN_USERNAME}
      - OWNCLOUD_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - OWNCLOUD_MYSQL_UTF8MB4=true
      - OWNCLOUD_REDIS_ENABLED=true
      - OWNCLOUD_REDIS_HOST=owncloud-redis
    healthcheck:
      test: ["CMD", "curl", "-f", "https://${OWNCLOUD_DOMAIN}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - frontend
      - backend
    volumes:
      - owncloud-files:/mnt/data

  owncloud-db:
    container_name: owncloud-db
    image: webhippie/mariadb:latest
    restart: always
    environment:
      - TZ=Europe/Oslo
      - MARIADB_ROOT_PASSWORD=owncloud
      - MARIADB_USERNAME=owncloud
      - MARIADB_PASSWORD=owncloud
      - MARIADB_DATABASE=owncloud
      - MARIADB_MAX_ALLOWED_PACKET=128M
      - MARIADB_INNODB_LOG_FILE_SIZE=64M
    healthcheck:
      test: ["CMD", "/usr/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend
    volumes:
      - owncloud-mysql:/var/lib/mysql
      - owncloud-mysql-backup:/var/lib/backup

  owncloud-redis:
    container_name: owncloud-redis
    image: webhippie/redis:latest
    restart: always
    environment:
      - TZ=Europe/Oslo
      - REDIS_DATABASES=1
    sysctls: 
      net.core.somaxconn: 511
      # see readme.md
    healthcheck:
      test: ["CMD", "/usr/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend
    volumes:
      - owncloud-redis:/var/lib/redis

  simple-apache-php:
    container_name: simple-apache-php
    build: ./simple-apache-php/.
    #image: local.registry.com/simple-apache-php:latest
    restart: always
    expose:
      - "80"
    environment:
      - TZ=Europe/Oslo
      - VIRTUAL_HOST=${SIMPLE_APACHE_PHP_DOMAIN}
      - VIRTUAL_PORT=80
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${SIMPLE_APACHE_PHP_DOMAIN}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    healthcheck:
      test: ["CMD", "curl", "-f", "https://${SIMPLE_APACHE_PHP_DOMAIN}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - frontend
    volumes:
      - ${MY_DOCKER_DATA_DIR}/simple-apache-php/src:/var/www/html

  nginx-redirect:
    container_name: nginx-redirect
    image: nginx:latest
    restart: always
    expose:
      - "80"
    environment:
      - TZ=Europe/Oslo
      - VIRTUAL_HOST=${REDIRECT_DOMAINS}
      - VIRTUAL_PORT=80
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${REDIRECT_DOMAINS}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    networks:
      - frontend
    volumes:
      - ${MY_DOCKER_DATA_DIR}/nginx-redirect/conf.d:/etc/nginx/conf.d

  grav:
    container_name: grav
    build: ./grav/.
    #image: local.registry.com/grav:latest
    restart: always
    expose:
      - "80"
    environment:
      - TZ=Europe/Oslo
      - VIRTUAL_HOST=${GRAV_DOMAIN}
      - VIRTUAL_PORT=80
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${GRAV_DOMAIN}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    networks:
      - frontend
    volumes:
      - ${MY_DOCKER_DATA_DIR}/grav:/var/www/html:cached

  nginx:
    container_name: nginx
    build: ./nginx-vts/.
    #image: local.registry.com/nginx-vts:latest 
    restart: always
    environment:
      - TZ=Europe/Oslo
    volumes:
      - nginx-conf:/etc/nginx/conf.d
      - ${MY_DOCKER_DATA_DIR}/nginx/vhost.d:/etc/nginx/vhost.d
      - nginx-html:/usr/share/nginx/html
      - nginx-certs:/etc/nginx/certs:ro
      - nginx-logs:/var/log/nginx
      - ${MY_DOCKER_DATA_DIR}/nginx/auth/.htpasswd:/etc/nginx/.htpasswd
      - ${MY_DOCKER_DATA_DIR}/nginx/GeoIPCity.dat:/usr/share/GeoIP/GeoCity.dat
      - ${MY_DOCKER_DATA_DIR}/nginx/GeoIP.dat:/usr/share/GeoIP/GeoIP.dat
    ports:
      - 80:80
      - 443:443
    networks:
      frontend:
        aliases:
          - nginx-vts-status

  nginx-gen:
    container_name: nginx-gen
    image: jwilder/docker-gen
    restart: always
    depends_on:
      - owncloud
      - simple-apache-php
      - portainer
      - nginx-redirect
      - grav
      - myregistry
      - grafana
      - prometheus
      - nginx
    entrypoint: /bin/sh -c
    command: ["/usr/local/bin/docker-gen -notify-sighup nginx -watch -wait 30s:60s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf"]
    networks:
      - frontend
    volumes:
      - nginx-conf:/etc/nginx/conf.d
      - ${MY_DOCKER_DATA_DIR}/nginx/vhost.d:/etc/nginx/vhost.d
      - nginx-html:/usr/share/nginx/html
      - nginx-certs:/etc/nginx/certs:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ${MY_DOCKER_DATA_DIR}/nginx-gen/templates/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro

  nginx-ssl:
    container_name: nginx-ssl
    image: jrcs/letsencrypt-nginx-proxy-companion
    restart: always
    depends_on:
      - nginx-gen
    environment:
      - TZ=Europe/Oslo
      - NGINX_PROXY_CONTAINER=nginx
      - NGINX_DOCKER_GEN_CONTAINER=nginx-gen
      #- ACME_CA_URI=https://acme-staging.api.letsencrypt.org/directory
      #- DEBUG=true
    networks:
      - frontend
    volumes:
      - nginx-conf:/etc/nginx/conf.d
      - ${MY_DOCKER_DATA_DIR}/nginx/vhost.d:/etc/nginx/vhost.d
      - nginx-html:/usr/share/nginx/html
      - nginx-certs:/etc/nginx/certs:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro

  portainer:
    container_name: portainer
    image: portainer/portainer
    environment:
      - TZ=Europe/Oslo
      - VIRTUAL_HOST=${PORTAINER_DOMAIN}
      - VIRTUAL_PORT=9000
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${PORTAINER_DOMAIN}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    command: -H unix:///var/run/docker.sock
    restart: always
    networks:
      - frontend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data

  # Cadvisor should not be exposed externally because it has no auth-mechanism
  # Change 8080:8080 to someport:8080 if you need to free up 8080, and access cadvisor on localhost:someport instead.
  cadvisor:
    image: 'google/cadvisor:latest'
    container_name: 'cadvisor'
    restart: always
    environment:
      - TZ=Europe/Oslo
    networks:
      - agents
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro

  openvpn-server:
    #cap_add:
    # - NET_ADMIN
    privileged: true
    image: kylemanna/openvpn
    container_name: openvpn-server
    environment:
      - TZ=Europe/Oslo
    ports:
      - "1194:1194/udp"
    # TCP when UDP doesn't work...
    #  - "443:443/tcp"
    restart: always
    volumes:
     - ${MY_DOCKER_DATA_DIR}/openvpn-server/config:/etc/openvpn

  ouroboros:
    container_name: ouroboros
    hostname: ouroboros
    image: pyouroboros/ouroboros
    environment:
      - CLEANUP=true
      #- INTERVAL=600
      - CRON="0 2 * * *"
      - SELF_UPDATE=true
      - TZ=Europe/Oslo
      - NOTIFIERS="mailtos://google-username:google-app-password@gmail.com?to=email@example.com"
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $HOME/.docker/config.json:/root/.docker/config.json

  myregistry:
    container_name: myregistry
    image: registry:2
    networks:
      - frontend
    expose:
      - "5000"
    restart: always
    environment:
      - TZ=Europe/Oslo
      - VIRTUAL_HOST=${REGISTRY_DOMAIN}
      - VIRTUAL_PORT=5000
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${REGISTRY_DOMAIN}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      - REGISTRY_AUTH=htpasswd
      - REGISTRY_AUTH_HTPASSWD_REALM=My Private Docker Registry
      - REGISTRY_AUTH_HTPASSWD_PATH=/auth/.htpasswd
    volumes:
      - ${MY_DOCKER_DATA_DIR}/registry/data:/var/lib/registry
      - nginx-certs:/certs
      - ${MY_DOCKER_DATA_DIR}/registry/auth:/auth

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: always
    networks:
      - frontend
      - backend
    expose:
      - "9090"
    environment:
      - TZ=Europe/Oslo
      - VIRTUAL_HOST=${PROMETHEUS_DOMAIN}
      - VIRTUAL_PORT=9090
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${PROMETHEUS_DOMAIN}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    volumes:
      - ${MY_DOCKER_DATA_DIR}/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ${MY_DOCKER_DATA_DIR}/prometheus/alert.rules:/etc/prometheus/alert.rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  prometheus-alertmanager:
    container_name: prometheus-alertmanager
    image: prom/alertmanager:latest
    restart: always
    environment:
      - TZ=Europe/Oslo
    networks:
      - backend
    volumes:
      - ${MY_DOCKER_DATA_DIR}/prometheus/alertmanager.yml:/alertmanager.yml
    command:
      - '--config.file=/alertmanager.yml'

  prometheus-node-exporter:
    container_name: prometheus-node-exporter
    image: prom/node-exporter:latest
    restart: always
    environment:
      - TZ=Europe/Oslo
    networks:
      - backend

  nginx-vts-exporter:
    container_name: nginx-vts-exporter
    image: sophos/nginx-vts-exporter
    restart: always
    networks:
      - backend
      - frontend
    environment:
      - TZ=Europe/Oslo
      - NGINX_STATUS=http://nginx-vts-status/status/format/json

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: always
    depends_on:
      - prometheus
    networks:
      - backend
      - frontend
    expose:
      - "3000"
    environment:
      - TZ=Europe/Oslo
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - VIRTUAL_HOST=${GRAFANA_DOMAIN}
      - VIRTUAL_PORT=3000
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${GRAFANA_DOMAIN}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    volumes:
      - grafana_data:/var/lib/grafana

